<?xml version="1.0" encoding="UTF-8"?>
<!-- Set Ant Project Name -->
<project name="athena" default="main" basedir=".">

	<property name="version" value="2.1.0" />

	<property name="env-mac" value="/usr/local/bin" />

	<property name="newline" value="&#10;" />

	<property name="build" value="./" />
	<property file="${build}site.properties" />

	<property name="sitexml" value="${build}site.xml" />
	<property name="optimize" value="${build}optimize/" />

	<property name="www" value="${build}www/" />
	<property name="templates" value="${build}www/templates/" />
	<property name="app" value="${sitePath}js/app/" />
	<property name="images" value="${sitePath}images/" />
	<property name="js" value="${sitePath}js/" />
	<property name="jsBuilt" value="${sitePath}js-built/" />
	<property name="css" value="${sitePath}css/" />
	<property name="cssBuilt" value="${sitePath}css-built/" />
	<property name="temp" value="${sitePath}temp/" />

	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${build}libs/ant-contrib-1.0b3.jar" />
	<taskdef name="xmltask" classpath="${build}libs/xmltask-1.16.jar" classname="com.oopsconsultancy.xmltask.ant.XmlTask" />

	<target name="main">
		<echo message="main" />
		<antcall target="create" />
	</target>

	<target name="!clean">
		<echo message="clean" />
		<antcall target="!clean-built" />
		<delete dir="${js}" />
		<delete dir="${css}" />
		<!--<delete dir="${images}" />-->
		<delete file="${indexPath}/index.html" />
	</target>

	<target name="!clean-built">
		<echo message="clean-built" />
		<delete dir="${cssBuilt}" />
		<delete dir="${jsBuilt}" />
	</target>

	<target name="create">
		<create-base/>
		<create-index/>
		<create-main/>
		<create-pages/>
		<create-map/>
	</target>

	<target name="create-pages">
		<create-pages/>
		<create-map/>
	</target>

	<macrodef name="create-base">
		<sequential>
			<echo message="create-base" />
			<copy toDir="${sitePath}js/" overwrite="false" encoding="UTF-8">
				<fileset dir="${www}js/" />
			</copy>
			<copy toDir="${sitePath}css/" overwrite="false" encoding="UTF-8">
				<fileset dir="${www}css/" />
			</copy>
			<!--<copy toDir="${sitePath}images/" overwrite="false" encoding="UTF-8">-->
				<!--<fileset dir="${www}images/" />-->
			<!--</copy>-->
		</sequential>
	</macrodef>

	<macrodef name="create-index">
		<sequential>
			<echo message="create-index" />
			<copy file="${templates}/index.html" tofile="${indexPath}/index.html" overwrite="false" encoding="UTF-8">
				<filterchain>
					<replacetokens>
						<token key="name" value="${siteName}" />
						<token key="path" value="${indexFixPath}" />
					</replacetokens>
				</filterchain>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="create-main">
		<sequential>
			<echo message="create-main" />
			<copy file="${templates}/main.js" tofile="${sitePath}js/main.js" overwrite="false" encoding="UTF-8">
				<filterchain>
					<replacetokens>
						<token key="path" value="${indexFixPath}" />
					</replacetokens>
				</filterchain>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="create-pages">
		<sequential>
			<echo message="create-pages" />
			<xmltask source="${sitexml}">
				<call path="//preloader">
					<param name="id" path="@id" />
					<param name="ready" path="@ready" default="false" />
					<actions>
						<if>
							<equals arg1="@{ready}" arg2="true" />
							<then>
								<copy file="${templates}preloader/preloader0.js" tofile="${app}preloader/@{id}.js" overwrite="false" encoding="UTF-8">
									<filterchain>
										<replacetokens>
											<token key="name" value="@{id}" />
										</replacetokens>
									</filterchain>
								</copy>
							</then>
							<else>
								<copy file="${templates}preloader/preloader.js" tofile="${app}preloader/@{id}.js" overwrite="false" encoding="UTF-8">
									<filterchain>
										<replacetokens>
											<token key="name" value="@{id}" />
										</replacetokens>
									</filterchain>
								</copy>
								<copy file="${templates}preloader/preloader.css" tofile="${app}preloader/@{id}.css" overwrite="false" encoding="UTF-8">
									<filterchain>
										<replacetokens>
											<token key="name" value="@{id}" />
										</replacetokens>
									</filterchain>
								</copy>
								<copy file="${templates}preloader/preloader.html" tofile="${app}preloader/@{id}.html" overwrite="false" encoding="UTF-8">
									<filterchain>
										<replacetokens>
											<token key="name" value="@{id}" />
										</replacetokens>
									</filterchain>
								</copy>
							</else>
						</if>
					</actions>
				</call>
			</xmltask>

			<xmltask source="${sitexml}">
				<call path="//header">
					<param name="id" path="@id" />
					<actions>
						<copy file="${templates}headfoot/header.js" tofile="${app}headfoot/@{id}.js" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
						<copy file="${templates}headfoot/header.css" tofile="${app}headfoot/@{id}.css" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
						<copy file="${templates}headfoot/header.html" tofile="${app}headfoot/@{id}.html" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
					</actions>
				</call>
			</xmltask>

			<xmltask source="${sitexml}">
				<call path="//footer">
					<param name="id" path="@id" />
					<actions>
						<copy file="${templates}headfoot/footer.js" tofile="${app}headfoot/@{id}.js" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
						<copy file="${templates}headfoot/footer.css" tofile="${app}headfoot/@{id}.css" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
						<copy file="${templates}headfoot/footer.html" tofile="${app}headfoot/@{id}.html" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
					</actions>
				</call>
			</xmltask>

			<xmltask source="${sitexml}">
				<call path="//page">
					<param name="id" path="@id" />
					<actions>
						<copy file="${templates}pages/page.js" tofile="${app}pages/@{id}.js" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
						<copy file="${templates}pages/page.css" tofile="${app}pages/@{id}.css" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
						<copy file="${templates}pages/page.html" tofile="${app}pages/@{id}.html" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
					</actions>
				</call>
			</xmltask>

			<copy file="${templates}pages/basePage.js" tofile="${app}pages/basePage.js" overwrite="false" encoding="UTF-8">
			</copy>

			<xmltask source="${sitexml}">
				<call path="//pop">
					<param name="id" path="@id" />
					<actions>
						<copy file="${templates}pops/pop.js" tofile="${app}pops/@{id}.js" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
						<copy file="${templates}pops/pop.css" tofile="${app}pops/@{id}.css" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
						<copy file="${templates}pops/pop.html" tofile="${app}pops/@{id}.html" overwrite="false" encoding="UTF-8">
							<filterchain>
								<replacetokens>
									<token key="name" value="@{id}" />
								</replacetokens>
							</filterchain>
						</copy>
					</actions>
				</call>
			</xmltask>

			<copy file="${templates}pops/basePop.js" tofile="${app}pops/basePop.js" overwrite="false" encoding="UTF-8">
			</copy>

		</sequential>
	</macrodef>

	<macrodef name="create-map">
		<sequential>
			<echo message="update-map" />

			<copy file="${templates}map.js" tofile="${app}base/map.js" overwrite="true" encoding="UTF-8">
			</copy>

			<add-text file="${app}base/map.js" text="define({${newline}"/>

			<xmltask source="${sitexml}">
				<call path="//preloader">
					<param name="id" path="@id" />
					<param name="depth" path="@depth" default="preload" />
					<param name="fast" path="@fast" default="false" />
					<param name="ready" path="@ready" default="false" />
					<actions>
						<add-text file="${app}base/map.js" text="@{id}:{id:'@{id}', view:'app/preloader/@{id}', depth:'@{depth}', fast:'@{fast}', ready:'@{ready}'},${newline}"/>
					</actions>
				</call>
			</xmltask>

			<xmltask source="${sitexml}">
				<call path="//header">
					<param name="id" path="@id" />
					<param name="depth" path="@depth" default="normal" />
					<param name="fast" path="@fast" default="false" />
					<actions>
						<add-text file="${app}base/map.js" text="@{id}:{id:'@{id}', view:'app/headfoot/@{id}', depth:'@{depth}', fast:'@{fast}'},${newline}"/>
					</actions>
				</call>
			</xmltask>

			<xmltask source="${sitexml}">
				<call path="//footer">
					<param name="id" path="@id" />
					<param name="depth" path="@depth" default="normal" />
					<param name="fast" path="@fast" default="false" />
					<actions>
						<add-text file="${app}base/map.js" text="@{id}:{id:'@{id}', view:'app/headfoot/@{id}', depth:'@{depth}', fast:'@{fast}'},${newline}"/>
					</actions>
				</call>
			</xmltask>

			<xmltask source="${sitexml}">
				<call path="//page">
					<param name="id" path="@id" />
					<param name="depth" path="@depth" default="normal" />
					<param name="fast" path="@fast" default="false" />
					<actions>
						<add-text file="${app}base/map.js" text="@{id}:{id:'@{id}', view:'app/pages/@{id}', depth:'@{depth}', fast:'@{fast}'},${newline}"/>
					</actions>
				</call>
			</xmltask>

			<xmltask source="${sitexml}">
				<call path="//pop">
					<param name="id" path="@id" />
					<param name="depth" path="@depth" default="normal" />
					<param name="fast" path="@fast" default="false" />
					<actions>
						<add-text file="${app}base/map.js" text="@{id}:{id:'@{id}', view:'app/pops/@{id}', depth:'@{depth}', fast:'@{fast}'},${newline}"/>
					</actions>
				</call>
			</xmltask>

			<replaceregexp match=",$$" replace="" flags="g" byline="false" encoding="UTF-8">
				<fileset dir="${app}base/" includes="map.js" />
			</replaceregexp>

			<add-text file="${app}base/map.js" text="});"/>
		</sequential>
	</macrodef>

	<macrodef name="add-text">
		<attribute name="file"/>
		<attribute name="text"/>
		<sequential>
			<concat destfile="${templates}temp.js" encoding="UTF-8">
				<fileset file="@{file}" />
				<footer filtering="no" trimleading="yes">@{text}</footer>
			</concat>
			<copy file="${templates}temp.js" tofile="@{file}" overwrite="true" encoding="UTF-8">
			</copy>
			<delete file="${templates}temp.js" />
		</sequential>
	</macrodef>

	<target name="_echo">
		<echo message="${id}" />
		<echo message="${depth}" />
		<echo message="${fast}" />
	</target>

	<target name="compile">
		<echo message="compile" />
		<antcall target="__optimize" />
		<antcall target="__delete-css-html" />
		<antcall target="__css-fix" />
		<antcall target="__cdn-format" />
		<antcall target="__mainjs-to-built" />
		<antcall target="index-to-built" />
	</target>

	<target name="__delete-css-html">
		<delete>
			<fileset dir="${jsBuilt}" includes="**/*.css"/>
			<fileset dir="${jsBuilt}" includes="**/*.html"/>
		</delete>
	</target>

	<target name="__cdn-format">
		<foreach list="" target="__cdn-footer" param="file">
			<fileset dir="${cssBuilt}" includes="**/*.js,**/*.html,**/*.css" />
		</foreach>
		<foreach list="" target="__cdn-footer" param="file">
			<fileset dir="${jsBuilt}" includes="**/*.js,**/*.html,**/*.css" />
		</foreach>
	</target>

	<target name="__cdn-footer">
		<concat append="yes" destfile="${file}" encoding="UTF-8">${newline}</concat>
	</target>

	<target name="images-to-built">
		<replaceregexp match="${imageMatch}" replace="${imageReplace}" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${cssBuilt}" includes="**/*.css" />
		</replaceregexp>
		<replaceregexp match="${imageMatch}" replace="${imageReplace}" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${jsBuilt}" includes="**/*.html,**/*.js" />
		</replaceregexp>
	</target>

	<target name="images-to-origin">
		<replaceregexp match="${imageReplace}" replace="${imageMatch}" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${cssBuilt}" includes="**/*.css" />
		</replaceregexp>
		<replaceregexp match="${imageReplace}" replace="${imageMatch}" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${jsBuilt}" includes="**/*.html,**/*.js" />
		</replaceregexp>
	</target>

	<target name="__mainjs-to-built">
        <replaceregexp match="/js/" replace="/js-built/" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${jsBuilt}" includes="main.js" />
		</replaceregexp>
	</target>

	<target name="index-to-built">
		<echo message="link-to-built" />
		<replaceregexp match="js/" replace="js-built/" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${indexPath}" includes="index.html" />
		</replaceregexp>
		<replaceregexp match="css/" replace="css-built/" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${indexPath}" includes="index.html" />
		</replaceregexp>
		<replaceregexp match="images/" replace="images-built/" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${indexPath}" includes="index.html" />
		</replaceregexp>
	</target>

	<target name="index-to-origin">
		<echo message="link-to-origin" />
		<replaceregexp match="js-built/" replace="js/" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${indexPath}" includes="index.html" />
		</replaceregexp>
		<replaceregexp match="css-built/" replace="css/" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${indexPath}" includes="index.html" />
		</replaceregexp>
		<replaceregexp match="images-built/" replace="images-built/" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${indexPath}" includes="index.html" />
		</replaceregexp>
	</target>

	<target name="__css-fix">
		<echo message="css-fix" />
		<replaceregexp match="url\(\&#34;..\/" replace="url\(\&#34;${indexFixPath}" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${jsBuilt}app/" includes="**/*.js" />
		</replaceregexp>
		<replaceregexp match="url\(\&#39;..\/" replace="url\(\&#39;${indexFixPath}" flags="g" byline="false" encoding="UTF-8">
			<fileset dir="${jsBuilt}app/" includes="**/*.js" />
		</replaceregexp>
	</target>

	<!-- set the operating system test properties -->
	<condition property="__isMac">
		<os family="mac" />
	</condition>

	<condition property="__isWindows">
		<os family="windows" />
	</condition>

	<condition property="__isUnix">
		<os family="unix" />
	</condition>

	<target name="__optimize">
		<echo message="optimize" />
		<antcall target="__optimize-unix" />
		<antcall target="__optimize-windows" />
	</target>

	<target name="__optimize-unix" if="__isUnix">
		<echo message="optimize-unix" />
		<exec executable="/bin/sh" failonerror="true">
			<env key="PATH" path="${env-mac}" />
			<arg line="-c 'node ${optimize}r.js -o ${optimize}css-build.js appDir=${css} baseUrl='./' dir=${cssBuilt}'" />
		</exec>
		<exec executable="/bin/sh" failonerror="true">
			<env key="PATH" path="${env-mac}" />
			<arg line="-c 'node ${optimize}r.js -o ${optimize}js-build.js appDir=${js} baseUrl='./' dir=${jsBuilt}'" />
		</exec>
	</target>

	<target name="__optimize-windows" if="__isWindows">
		<echo message="optimize-windows" />
		<exec executable="cmd" failonerror="true">
			<arg line="/c node ${optimize}r.js -o ${optimize}css-build.js appDir=${css} baseUrl='./' dir=${cssBuilt}" />
		</exec>
		<exec executable="cmd" failonerror="true">
			<arg line="/c node ${optimize}r.js -o ${optimize}js-build.js appDir=${js} baseUrl='./' dir=${jsBuilt}" />
		</exec>
	</target>

</project>
